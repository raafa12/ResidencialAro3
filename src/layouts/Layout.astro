---
// src/layouts/Layout.astro
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Un edificio histórico en el corazón de Santoña' } = Astro.props;
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title} — ARO 3</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,300;0,400;0,500;1,300&family=Montserrat:wght@200;300;400;500&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
      /* Custom styles that override global styles when needed */
      :root {
        --primary: #006790;
        --primary-dark: #014e6c;
        --primary-darker: #003249;
        --secondary: #8b7355;
        --dark: #1a1a1a;
        --light: #f8f9fa;
        --white: #ffffff;
        --cream: #faf9f7;
        --border: #e5e5e5;
        --text-primary: #333333;
        --text-secondary: #666666;
        --text-light: #999999;
        --gray-100: #f8f9fa;
        --gray-200: #e9ecef;
        --gray-300: #dee2e6;
        --gray-400: #ced4da;
        --gray-500: #adb5bd;
        --gray-600: #6c757d;
        --gray-700: #495057;
        --gray-800: #343a40;
        --gray-900: #212529;
      }
      
      /* Smooth scrolling for anchor links */
      html {
        scroll-behavior: smooth;
      }
      
      /* Base animation classes */
      .fade-in {
        opacity: 0;
        transform: translateY(30px);
        transition: all 0.8s cubic-bezier(0.16, 1, 0.3, 1);
      }
      
      .fade-in.in-view {
        opacity: 1;
        transform: translateY(0);
      }
      
      .fade-up {
        opacity: 0;
        transform: translateY(50px);
        transition: all 1s cubic-bezier(0.16, 1, 0.3, 1);
      }
      
      .fade-up.in-view {
        opacity: 1;
        transform: translateY(0);
      }
      
      .fade-left {
        opacity: 0;
        transform: translateX(-30px);
        transition: all 0.8s cubic-bezier(0.16, 1, 0.3, 1);
      }
      
      .fade-left.in-view {
        opacity: 1;
        transform: translateX(0);
      }
      
      .fade-right {
        opacity: 0;
        transform: translateX(30px);
        transition: all 0.8s cubic-bezier(0.16, 1, 0.3, 1);
      }
      
      .fade-right.in-view {
        opacity: 1;
        transform: translateX(0);
      }
      
      .scale-in {
        opacity: 0;
        transform: scale(0.9);
        transition: all 0.6s cubic-bezier(0.16, 1, 0.3, 1);
      }
      
      .scale-in.in-view {
        opacity: 1;
        transform: scale(1);
      }
      
      /* Delay classes */
      .delay-100 { transition-delay: 0.1s; }
      .delay-200 { transition-delay: 0.2s; }
      .delay-300 { transition-delay: 0.3s; }
      .delay-400 { transition-delay: 0.4s; }
      .delay-500 { transition-delay: 0.5s; }
      .delay-600 { transition-delay: 0.6s; }
      .delay-700 { transition-delay: 0.7s; }
      .delay-800 { transition-delay: 0.8s; }
    </style>
  </head>
  <body class="antialiased text-gray-800 bg-white">
    <slot />

    <script>
      // Global animation system
      class AnimationController {
        constructor() {
          this.observers = new Map();
          this.initializeAnimations();
          this.initializeSmoothScrolling();
        }

        initializeAnimations() {
          // Standard animation observer
          const standardObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                entry.target.classList.add('in-view');
              }
            });
          }, {
            threshold: 0.1,
            rootMargin: '0px 0px -50px 0px'
          });

          // Staggered animation observer for grids
          const staggeredObserver = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
              if (entry.isIntersecting) {
                const children = entry.target.querySelectorAll('.fade-in, .fade-up, .fade-left, .fade-right, .scale-in');
                children.forEach((child, index) => {
                  setTimeout(() => {
                    child.classList.add('in-view');
                  }, index * 100);
                });
              }
            });
          }, {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px'
          });

          // Observe standard animated elements
          const animatedElements = document.querySelectorAll('.fade-in, .fade-up, .fade-left, .fade-right, .scale-in');
          animatedElements.forEach(element => {
            standardObserver.observe(element);
          });

          // Observe grids for staggered animations
          const gridElements = document.querySelectorAll('.features-grid, .gallery-grid, .specs-grid');
          gridElements.forEach(element => {
            staggeredObserver.observe(element);
          });
        }

        initializeSmoothScrolling() {
          // Enhanced smooth scrolling with offset for fixed header
          document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', (e) => {
              const targetId = anchor.getAttribute('href');
              if (targetId === '#' || targetId === '') return;
              
              e.preventDefault();
              const targetElement = document.querySelector(targetId);
              if (targetElement) {
                const headerOffset = 100;
                const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
                const offsetPosition = elementPosition - headerOffset;

                window.scrollTo({
                  top: offsetPosition,
                  behavior: 'smooth'
                });
                
                // Update URL without adding to history
                history.replaceState(null, '', targetId);
              }
            });
          });
        }
      }

      // Navbar scroll effect
      function initializeNavbar() {
        const navbar = document.getElementById('navbar');
        if (!navbar) return;

        const handleScroll = () => {
          if (window.scrollY > 50) {
            navbar.classList.add('scrolled');
          } else {
            navbar.classList.remove('scrolled');
          }
        };

        window.addEventListener('scroll', handleScroll);
        handleScroll(); // Check initial state
      }

      // Initialize everything when DOM is ready
      document.addEventListener('DOMContentLoaded', () => {
        new AnimationController();
        initializeNavbar();

        // Initialize any component-specific scripts
        const event = new CustomEvent('app:initialized');
        document.dispatchEvent(event);
      });
    </script>
  </body>
</html>