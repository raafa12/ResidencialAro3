---
// src/layouts/Layout.astro
import '../styles/global.css';

interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Un edificio histórico en el corazón de Santoña' } = Astro.props;
---

<!DOCTYPE html>
<html lang="es" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={description} />
    <title>{title} — ARO 3</title>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playfair+Display:ital,wght@0,300;0,400;0,500;1,300&family=Montserrat:wght@200;300;400;500&display=swap" rel="stylesheet">
    
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <style>
      /* Custom styles that override global styles when needed */
      :root {
        --primary: #006790;
        --primary-dark: #014e6c;
        --primary-darker: #003249;
      }
      
      /* Smooth scrolling for anchor links */
      html {
        scroll-behavior: smooth;
      }
      
      /* Animation classes */
      .fade-in {
        opacity: 0;
        transform: translateY(20px);
        transition: opacity 0.8s ease, transform 0.8s ease;
      }
      
      .fade-in.in-view {
        opacity: 1;
        transform: translateY(0);
      }
      
      .delay-100 { transition-delay: 0.1s; }
      .delay-200 { transition-delay: 0.2s; }
      .delay-300 { transition-delay: 0.3s; }
      .delay-400 { transition-delay: 0.4s; }
      .delay-500 { transition-delay: 0.5s; }
      .delay-600 { transition-delay: 0.6s; }
    </style>
  </head>
  <body class="antialiased text-gray-800 bg-white">
    <slot />

    <script>
      // Initialize animations on page load
      document.addEventListener('DOMContentLoaded', () => {
        // Initialize Intersection Observer for animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: '0px 0px -100px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach(entry => {
            if (entry.isIntersecting) {
              entry.target.classList.add('in-view');
            }
          });
        }, observerOptions);

        // Observe all elements with animation classes
        const animatedElements = document.querySelectorAll('.fade-in, .fade-up, .fade-left, .fade-right, .section');
        animatedElements.forEach(element => {
          observer.observe(element);
        });

        // Smooth scrolling for anchor links with offset for fixed header
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
          anchor.addEventListener('click', function(e) {
            const targetId = this.getAttribute('href');
            if (targetId === '#' || targetId === '') return;
            
            e.preventDefault();
            const targetElement = document.querySelector(targetId);
            if (targetElement) {
              const headerOffset = 100;
              const elementPosition = targetElement.getBoundingClientRect().top + window.pageYOffset;
              const offsetPosition = elementPosition - headerOffset;

              window.scrollTo({
                top: offsetPosition,
                behavior: 'smooth'
              });
              
              // Update URL without adding to history
              history.pushState(null, '', targetId);
            }
          });
        });
      });
    </script>
  </body>
</html>